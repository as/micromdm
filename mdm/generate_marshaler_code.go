// +build ignore

package main

import (
	"bytes"
	"flag"
	"html/template"
	"io/ioutil"
	"log"
	"reflect"

	"github.com/as/micromdm/mdm"
	"golang.org/x/tools/imports"
)

func main() {
	out := flag.String("out", "marshaler.go", "path to output file")
	flag.Parse()
	pbytes := generateMarshalPlist()
	jbytes := generateUnmarshalJSON()

	var buf bytes.Buffer
	buf.Write(pbytes)
	buf.Write([]byte("\n"))
	buf.Write(jbytes)

	pretty, err := imports.Process("", buf.Bytes(), nil)
	if err != nil {
		log.Fatal(err)
	}
	ioutil.WriteFile(*out, pretty, 0644)

}

const plistStub = `
// generated by go:generate, DO NOT EDIT

package mdm

func (c *Command) MarshalPlist() (interface{}, error) {
	switch c.RequestType {
	case "ProfileList",
		"ProvisioningProfileList",
		"CertificateList",
		"SecurityInfo",
		"StopMirroring",
		"ClearRestrictionsPassword",
		"UserList",
		"LogOutUser",
		"DisableLostMode",
		"DeviceLocation",
		"ManagedMediaList",
		"OSUpdateStatus",
		"DeviceConfigured",
		"AvailableOSUpdates",
		"Restrictions",
		"ShutDownDevice",
		"RestartDevice":
		return &struct {
			RequestType string
		}{
			RequestType:       c.RequestType,
		}, nil

	{{ range .}}
	case "{{.Case}}":
		return &struct {
			RequestType string
			{{.Case}}
		}{
			RequestType:       c.RequestType,
			{{.Case}}: c.{{.Case}},
		}, nil
	{{end}}
	default:
		return nil, fmt.Errorf("unknown request type: %s", c.RequestType)
	}
}
`

func generateMarshalPlist() []byte {
	type param struct {
		Case string
	}
	var params []param
	val := reflect.ValueOf(mdm.Command{})
	for i := 1; i < val.NumField(); i++ {
		name := val.Field(i).Type().Name()
		params = append(params, param{Case: name})
	}

	var tmpl = template.Must(template.New("test").Parse(plistStub))
	var buf bytes.Buffer
	tmpl.Execute(&buf, params)
	return buf.Bytes()
}

func generateUnmarshalJSON() []byte {
	type param struct {
		Case string
	}
	var params []param
	val := reflect.ValueOf(mdm.Command{})
	for i := 1; i < val.NumField(); i++ {
		name := val.Field(i).Type().Name()
		params = append(params, param{Case: name})
	}

	var tmpl = template.Must(template.New("").ParseFiles("marshal_json.template"))
	var buf bytes.Buffer
	if err := tmpl.ExecuteTemplate(&buf, "marshal_json.template", params); err != nil {
		log.Fatal(err)
	}
	return buf.Bytes()
}
